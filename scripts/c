#!/bin/bash

#Build Shortcuts
function cFile(){
#Quickly compile and run C code
   cFile=$(echo "$1"|rev |cut -d"/" -f1|rev|cut -d. -f1)
   error=$(make "$cFile")
   #If no error then run executable
   if [ $? -eq 0 ]
   then
		#Create arguements string
	    args=" "
	    for i in $@
	    do
	        if [ $i != $1 ]
	        then
	            args="$args ${i}"

	        fi
	    done
    	#Run the executable
		./$cFile $args
   fi
   #If executable was made delete it
   if [ -f $cFile ]
   then
       rm $cFile
   fi
}

function cppFile(){
#Quickly compile and run C++ code
   cFile=$(echo "$1"|rev |cut -d"/" -f1|rev|cut -d. -f1)
   # cFile=$(echo "$cFile"|cut -d. -f1)
   error=$(make -s "$cFile")
   #If no error run executable
   if [ $? -eq 0 ]
   then
		#Create arguements string
	    args=" "
	    for i in $@
	    do
	        if [ $i != $1 ]
	        then
	            args="$args ${i}"

	        fi
	    done
    	#Run the executable
		./$cFile $args
   fi
   #If executable was made delete it
   if [ -f $cFile ]
   then
       rm $cFile
   fi
}

function javaFile(){
#Quickly run and compile java code
    #Compile the .java file
    error=`javac $1`
    #If executable was generated run it
    if [ $? -eq 0 ];then
        cFile=`echo $1|rev |cut -d"/" -f1|rev|cut -d. -f1`
        args=" "
	    #Create arguements string
	    for i in $@
	    do
	        if [ $i != $1 ]
	        then
	            args="$args ${i}"

	        fi
	    done
        #Run the executable
        java $cFile $args
    fi

    #Remove the .class file is generated
    if [ -f "$cFile.class" ]
    then
        rm "$cFile.class"
    fi
}

goFile(){
  refactoredCode=$(goimports "$1") 
  if [ -z "$refactoredCode" ];then
      echo "problem with goimports"
      return
  else
      echo "$refactoredCode" > "tempFile"
  fi
  mv "tempFile" $1
  for i in $@
  do
    if [ $i != $1 ]
    then
        args="$args ${i}"

    fi 
  done
  go run $1 $2 
}

# Main Build Logic
if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: c <path/file_name>.<c|c++|java>"
    echo "       c <path/file_name_1.c>"
    exit
else

# Get commandline args to be provided to the program
Args=" "
for i in $@
do
  if [ $i != $1 ];then
    Args="${Args} ${i}"
  fi
done

#Check if path is provided
case "$1" in
    /*) isPath=""
        ;;

    *)isPath="./"
esac

if [ -f "$1" ] ; then
  case "${1%,}" in
    *.c)	cFile $isPath"$1" "$Args" ;;
    *.cpp)  cppFile $isPath"$1" "$Args" ;;
    *.java) javaFile $isPath"$1" "$Args" ;;
    *.go)   goFile $isPath"$1" "$Args" ;;
    *.py)   python $isPath"$1" "$Args";;
    *)      # If type is not provided simply run the file
			# Check if its executable
			if [ -x $1 ]; then
              $isPath$1
            else
			  # Make executable and run
              chmod +x $1 && $isPath$1
            fi
            return 1
            ;;
  esac
else
      echo "'$1' - file does not exist"
      return 1
fi
fi

